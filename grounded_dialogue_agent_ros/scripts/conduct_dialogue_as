#!/usr/bin/env python
import argparse
import os
import pickle
import sys
# Place TSP, grounded_dialog_agent in the parent directory of the package. This'll add them to the path so the imports below work
sys.path.append(os.path.abspath('../../'))
import Agent
import IO
import KBGrounder

import rospy
import actionlib
import grounded_dialogue_agent_ros.msg


class DialogueActionServer:
    # create messages that are used to publish feedback/result
    _feedback = grounded_dialogue_agent_ros.msg.ConductDialogueFeedback()
    _result = grounded_dialogue_agent_ros.msg.ConductDialogueResult()

    def __init__(self, name, a, test_set_oidxs):
        self.a = a
        self.test_set_oidxs = test_set_oidxs
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name,
                                                grounded_dialogue_agent_ros.msg.ConductDialogueAction,
                                                execute_cb=self.execute_cb, auto_start=False)
        self._as.start()

    def execute_cb(self):

        # Use the agent to conduct the dialogue and get the role value slot fills (rvs)
        rvs, _ = self.a.start_action_dialog(perception_labels_requested=[],
                                            perform_action=False)

        # If things fail, set the goal as aborted and return.
        if rvs["action"] not in ["walk", "bring", "move"]:
            print "ERROR: Unrecognized command '" + str(rvs["action"]) + "'."
            self._as.set_aborted(self._result)
            return
        if rvs["action"] is not "move":
            self._as.set_aborted(self._result)
            print "WARNING: Only the 'relocate' command is implemented."
            return

        # If things succeed, populate these fields on the result.
        # The type of command here doesn't matter but the other strings do
        # Locations should be rooms or tables noted in the BWI knowledgebase.
        # Object ID should just be the index of the object (left to right) on the table at the object location
        self._result.command_type = "move"

        source = "l" + rvs["source"][:1] + "." + rvs["source"][1:]  # e.g. 3516 -> l3.516
        self._result.object_location = source

        goal = "l" + rvs["goal"][:1] + "." + rvs["goal"][1:]  # e.g. 3414b -> l3.414b
        self._result.destination_location = goal

        oidx = int(rvs["patient"].split("_")[1])
        self._result.object_id = self.test_set_oidxs.index(oidx)

        rospy.loginfo('%s: Succeeded' % self._action_name)
        self._as.set_succeeded(self._result)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--parser_fn', type=str, required=False,
                        help="a parser pickle to load")
    parser.add_argument('--word_embeddings_fn', type=str, required=False,
                        help="fresh word embeddings to deal with gensim version differences")
    parser.add_argument('--kb_static_facts_fn', type=str, required=False,
                        help="static facts file for the knowledge base")
    parser.add_argument('--kb_perception_source_dir', type=str, required=False,
                        help="perception source directory for knowledge base")
    parser.add_argument('--kb_perception_feature_dir', type=str, required=False,
                        help="perception feature directory for knowledge base")
    parser.add_argument('--active_test_set', type=str, required=False,
                        help="objects to consider possibilities for grounding; " +
                             "excluded from perception classifier training; " +
                             "for demonstration, these are considered in-order on the test table")
    parser.add_argument('--active_train_set', type=str, required=False, default=None,
                        help="objects to consider 'local' and able to be queried by opportunistic active learning")
    parser.add_argument('--max_syn_qs', type=int, required=False, default=3,
                        help="the maximum number of synonym neighbors to ask about")
    parser.add_argument('--max_opp_qs', type=int, required=False, default=5,
                        help="the maximum number of perception questions to ask")
    parser.add_argument('--no_clarify', type=str, required=False,
                        help="comma-separated list of roles not to clarify during dialog")
    args = parser.parse_args()

    rospy.init_node('conduct_dialogue')

    # Load the parser from file.
    print "main: loading parser from file..."
    with open(args["parser_fn"], 'rb') as f:
        p = pickle.load(f)
    p.lexicon.wv = p.lexicon.load_word_embeddings(args["word_embeddings_fn"])
    print "main: ... done"

    # Instantiate a grounder.
    print "main: instantiating grounder..."
    g = KBGrounder.KBGrounder(p, args["kb_static_facts_fn"],
                              args["kb_perception_source_dir"],
                              args["kb_perception_feature_dir"],
                              args["active_test_set"])
    print "main: ... done"

    # Instantiate IO.
    table_oidxs = {1: args["active_train_set"][0:4], 2: args["active_train_set"][4:8], 3: None}
    print "WARNING: ensure robot is facing Table 2 on startup!"
    io = IO.RobotIO(table_oidxs, 2)

    agent = Agent.Agent(p, g, io, args["active_train_set"], no_clarify=args["no_clarify"],
                        use_shorter_utterances=True,
                        word_neighbors_to_consider_as_synonyms=args["max_syn_qs"],
                        max_perception_subdialog_qs=args["max_opp_qs"])

    # Pass the agent into the server
    server = DialogueActionServer(rospy.get_name(), agent, args["active_test_set"])


rospy.spin()
